{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","disCountry","window","AMap","DistrictLayer","Country","zIndex","SOC","depth","styles","this","map","Map","center","resizeEnable","zoom","layers","DistrictSearch","level","subdistrict","extensions","search","status","result","handlePolygon","bounds","districtList","boundaries","pathArray","LngLat","push","apply","Polygon","strokeWeight","path","fillOpacity","fillColor","strokeColor","className","id","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAGqBA,G,wDAEnB,WAAYC,GAAQ,uCACZA,G,gEAGa,IAAD,OACdC,EAAa,IAAIC,OAAOC,KAAKC,cAAcC,QAAQ,CACnDC,OAAO,GACPC,IAAI,MACJC,MAAM,EACNC,OAAO,CACH,gBAAgB,eAChB,mBAAmB,CAAC,IAAM,IAAM,IAAM,GACtC,kBAAkB,MAClB,cAAe,yBAIvBC,KAAKC,IAAM,IAAIT,OAAOC,KAAKS,IAAI,MAAO,CAClCC,OAAQ,CAAC,UAAW,WACpBC,cAAc,EACdC,KAAM,EACNC,OAAQ,CACNf,KAKe,IAAIC,OAAOC,KAAKc,eAAe,CAElDC,MAAO,UAEPC,YAAa,EAEbC,WAAY,QAICC,OAAO,gBAAM,SAACC,EAAQC,GAEnC,EAAKC,cAAcD,Q,oCAITA,GACZ,IAAIE,EAASF,EAAOG,aAAa,GAAGC,WAmBhCC,EAAY,CAPJ,CACR,IAAI1B,OAAOC,KAAK0B,QAAQ,IAAI,IAAG,GAC/B,IAAI3B,OAAOC,KAAK0B,QAAQ,KAAK,IAAG,GAChC,IAAI3B,OAAOC,KAAK0B,OAAO,KAAK,IAAG,GAC/B,IAAI3B,OAAOC,KAAK0B,OAAO,IAAI,IAAG,KAOlCD,EAAUE,KAAKC,MAAMH,EAAWH,GAE5BG,GAEF,IAAI1B,OAAOC,KAAK6B,QAAQ,CACtBrB,IAAKD,KAAKC,IACVsB,aAAc,EACdC,KAAMN,EACNO,YAAa,IACbC,UAAW,UACXC,YAAa,c,+BAMjB,OACE,qBAAKC,UAAU,YAAf,SACE,qBAAKC,GAAG,c,GAvFiBC,cCSlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c5af90b.chunk.js","sourcesContent":["import './App.css';\nimport React,{ Component } from 'react'\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let disCountry = new window.AMap.DistrictLayer.Country({\n        zIndex:10,\n        SOC:'CHN',\n        depth:2,\n        styles:{\n            'nation-stroke':'#transparent',\n            'coastline-stroke':[0.85, 0.63, 0.94, 0],\n            'province-stroke':'red',\n            'city-stroke': 'rgba(255,255,255,0)',//中国特有字段\n        }\n    })\n    //eslint-disable-next-line \n    this.map = new window.AMap.Map('map', {\n        center: [104.29885, 31.957237],\n        resizeEnable: true,\n        zoom: 4,\n        layers: [\n          disCountry\n        ]\n    })\n\n    //eslint-disable-next-line \n    let districtSearch = new window.AMap.DistrictSearch({\n      // 关键字对应的行政区级别，共有5种级别\n      level: 'country',\n      //  是否显示下级行政区级数，1表示返回下一级行政区\n      subdistrict: 0,\n     // 返回行政区边界坐标点\n      extensions: 'all',\n    });\n\n    // 搜索所有省/直辖市信息\n    districtSearch.search('中国', (status, result) => {\n      // 查询成功时，result即为对应的行政区信息\n      this.handlePolygon(result);\n    })\n  }\n\n  handlePolygon(result) {\n    let bounds = result.districtList[0].boundaries\n    // let newBounds = [];\n    // bounds.map((v, k) => {\n    //   let newItem;\n\n    //   newItem = v.filter((element, index, array) => {\n    //     return index % 2 === 0;\n    //   })\n\n    //   newBounds.push(newItem);\n    // })\n\n    let outer = [\n        new window.AMap.LngLat(-360,90,true),\n        new window.AMap.LngLat(-360,-90,true),\n        new window.AMap.LngLat(360,-90,true),\n        new window.AMap.LngLat(360,90,true),\n    ];\n\n    let pathArray = [\n        outer\n    ];\n\n    pathArray.push.apply(pathArray, bounds);\n\n    if (pathArray) {\n      //eslint-disable-next-line \n      new window.AMap.Polygon({\n        map: this.map,    // 指定地图对象\n        strokeWeight: 2,    // 轮廓线宽度\n        path: pathArray,     //轮廓线的节点坐标数组\n        fillOpacity: 0.15,     //透明度\n        fillColor: '#256edc',     //填充颜色\n        strokeColor: '#256edc',    //线条颜色\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div id=\"map\"></div>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}