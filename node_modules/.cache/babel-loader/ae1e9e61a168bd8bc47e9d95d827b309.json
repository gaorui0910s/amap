{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/r_gaor/Downloads/amap/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let disCountry = new window.AMap.DistrictLayer.Country({\n      zIndex: 10,\n      SOC: 'CHN',\n      depth: 2,\n      styles: {\n        'nation-stroke': '#transparent',\n        'coastline-stroke': [0.85, 0.63, 0.94, 0],\n        'province-stroke': 'red',\n        'city-stroke': 'rgba(255,255,255,0)' //中国特有字段\n\n      }\n    }); //eslint-disable-next-line \n\n    this.map = new window.AMap.Map('map', {\n      center: [104.29885, 31.957237],\n      resizeEnable: true,\n      zoom: 4,\n      layers: [disCountry]\n    }); //eslint-disable-next-line \n\n    let districtSearch = new window.AMap.DistrictSearch({\n      // 关键字对应的行政区级别，共有5种级别\n      level: 'country',\n      //  是否显示下级行政区级数，1表示返回下一级行政区\n      subdistrict: 0,\n      // 返回行政区边界坐标点\n      extensions: 'all'\n    }); // 搜索所有省/直辖市信息\n\n    districtSearch.search('中国', (status, result) => {\n      // 查询成功时，result即为对应的行政区信息\n      this.handlePolygon(result);\n      this.handleGroundImage(result);\n    });\n  }\n\n  handlePolygon(result) {\n    let bounds = result.districtList[0].boundaries; // let newBounds = [];\n    // bounds.map((v, k) => {\n    //   let newItem;\n    //   newItem = v.filter((element, index, array) => {\n    //     return index % 2 === 0;\n    //   })\n    //   newBounds.push(newItem);\n    // })\n\n    let outer = [new window.AMap.LngLat(-360, 90, true), new window.AMap.LngLat(-360, -90, true), new window.AMap.LngLat(360, -90, true), new window.AMap.LngLat(360, 90, true)];\n    let pathArray = [outer];\n    pathArray.push.apply(pathArray, bounds);\n\n    if (pathArray) {\n      //eslint-disable-next-line \n      new window.AMap.Polygon({\n        map: this.map,\n        // 指定地图对象\n        strokeWeight: 2,\n        // 轮廓线宽度\n        path: pathArray,\n        //轮廓线的节点坐标数组\n        fillOpacity: 0.15,\n        //透明度\n        fillColor: '#256edc',\n        //填充颜色\n        strokeColor: '#256edc' //线条颜色\n\n      });\n    }\n  }\n\n  handleGroundImage(result) {\n    let bounds = result.districtList[0].boundaries;\n    new window.AMap.GroundImage('https://i.loli.net/2020/12/18/XBUe2rWoiYxyDHm.jpg', bounds, {\n      map: this.map\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/r_gaor/Downloads/amap/src/App.js"],"names":["React","Component","App","constructor","props","componentDidMount","disCountry","window","AMap","DistrictLayer","Country","zIndex","SOC","depth","styles","map","Map","center","resizeEnable","zoom","layers","districtSearch","DistrictSearch","level","subdistrict","extensions","search","status","result","handlePolygon","handleGroundImage","bounds","districtList","boundaries","outer","LngLat","pathArray","push","apply","Polygon","strokeWeight","path","fillOpacity","fillColor","strokeColor","GroundImage","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React,{ Component } from 'react'\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let disCountry = new window.AMap.DistrictLayer.Country({\n        zIndex:10,\n        SOC:'CHN',\n        depth:2,\n        styles:{\n            'nation-stroke':'#transparent',\n            'coastline-stroke':[0.85, 0.63, 0.94, 0],\n            'province-stroke':'red',\n            'city-stroke': 'rgba(255,255,255,0)',//中国特有字段\n        }\n    })\n    //eslint-disable-next-line \n    this.map = new window.AMap.Map('map', {\n        center: [104.29885, 31.957237],\n        resizeEnable: true,\n        zoom: 4,\n        layers: [\n          disCountry\n        ]\n    })\n\n    //eslint-disable-next-line \n    let districtSearch = new window.AMap.DistrictSearch({\n      // 关键字对应的行政区级别，共有5种级别\n      level: 'country',\n      //  是否显示下级行政区级数，1表示返回下一级行政区\n      subdistrict: 0,\n     // 返回行政区边界坐标点\n      extensions: 'all',\n    });\n\n    // 搜索所有省/直辖市信息\n    districtSearch.search('中国', (status, result) => {\n      // 查询成功时，result即为对应的行政区信息\n      this.handlePolygon(result);\n      this.handleGroundImage(result);\n    })\n  }\n\n  handlePolygon(result) {\n    let bounds = result.districtList[0].boundaries\n    // let newBounds = [];\n    // bounds.map((v, k) => {\n    //   let newItem;\n\n    //   newItem = v.filter((element, index, array) => {\n    //     return index % 2 === 0;\n    //   })\n\n    //   newBounds.push(newItem);\n    // })\n\n    let outer = [\n        new window.AMap.LngLat(-360,90,true),\n        new window.AMap.LngLat(-360,-90,true),\n        new window.AMap.LngLat(360,-90,true),\n        new window.AMap.LngLat(360,90,true),\n    ];\n\n    let pathArray = [\n        outer\n    ];\n\n    pathArray.push.apply(pathArray, bounds);\n\n    if (pathArray) {\n      //eslint-disable-next-line \n      new window.AMap.Polygon({\n        map: this.map,    // 指定地图对象\n        strokeWeight: 2,    // 轮廓线宽度\n        path: pathArray,     //轮廓线的节点坐标数组\n        fillOpacity: 0.15,     //透明度\n        fillColor: '#256edc',     //填充颜色\n        strokeColor: '#256edc',    //线条颜色\n      })\n    }\n  }\n\n  handleGroundImage(result) {\n    let bounds = result.districtList[0].boundaries\n    new window.AMap.GroundImage('https://i.loli.net/2020/12/18/XBUe2rWoiYxyDHm.jpg', bounds, {\n      map: this.map\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div id=\"map\"></div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}