{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/r_gaor/Downloads/amap/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport { Map } from 'react-amap';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let disCountry = new window.AMap.DistrictLayer.Country({\n      zIndex: 10,\n      SOC: 'CHN',\n      depth: 2,\n      styles: {\n        'nation-stroke': 'transparent',\n        'coastline-stroke': [0.85, 0.63, 0.94, 0],\n        'province-stroke': 'red',\n        'city-stroke': 'rgba(255,255,255,0.15)' //中国特有字段\n        // 'fill':function(props){//中国特有字段\n        //   return getColorByDGP(props.adcode_pro)\n        // }\n\n      }\n    }); //eslint-disable-next-line \n\n    this.map = new window.AMap.Map('map', {\n      center: [104.29885, 31.957237],\n      resizeEnable: true,\n      zoom: 4,\n      layers: [disCountry]\n    }); //eslint-disable-next-line \n\n    window.AMap.plugin('AMap.DistrictSearch', () => {\n      //eslint-disable-next-line \n      let districtSearch = new window.AMap.DistrictSearch({\n        // 关键字对应的行政区级别，共有5种级别\n        level: 'country',\n        //  是否显示下级行政区级数，1表示返回下一级行政区\n        subdistrict: 0,\n        // 返回行政区边界坐标点\n        extensions: 'all'\n      }); // 搜索所有省/直辖市信息\n\n      districtSearch.search(100000, (status, result) => {\n        // 查询成功时，result即为对应的行政区信息\n        this.handlePolygon(result);\n      }); //   districtSearch.search('中国',(status,result) => {\n      //     // 外多边形坐标数组和内多边形坐标数组\n      //     var outer = [\n      //         new window.AMap.LngLat(-360,90,true),\n      //         new window.AMap.LngLat(-360,-90,true),\n      //         new window.AMap.LngLat(360,-90,true),\n      //         new window.AMap.LngLat(360,90,true),\n      //     ];\n      //     var holes = result.districtList[0].boundaries\n      //     var pathArray = [\n      //         outer\n      //     ];\n      //     pathArray.push.apply(pathArray,holes)\n      //     var polygon = new window.AMap.Polygon( {\n      //         pathL:pathArray,\n      //         strokeColor: '#00eeff',\n      //         strokeWeight: 1,\n      //         fillColor: '#71B3ff',\n      //         fillOpacity: 1\n      //     });\n      //     polygon.setPath(pathArray);\n      //     this.map.add(polygon);\n      //     this.map.setFitView();\n      // })\n    });\n  }\n\n  handlePolygon(result) {\n    let bounds = result.districtList[1].boundaries;\n    let newBounds = [];\n    bounds.map((v, k) => {\n      let a;\n\n      if (k == 0) {\n        console.log(v);\n      }\n\n      a = v.filter((element, index, array) => {\n        return index % 2 == 0;\n      });\n\n      if (k == 0) {\n        console.log(a);\n      }\n\n      newBounds.push(a);\n    }); // newBounds = bounds;\n\n    if (newBounds) {\n      // for (let i = 0, l = newBounds.length; i < l; i++) {\n      //生成行政区划polygon\n      //eslint-disable-next-line \n      let polygon = new window.AMap.Polygon({\n        map: this.map,\n        // 指定地图对象\n        strokeWeight: 2,\n        // 轮廓线宽度\n        path: newBounds,\n        //轮廓线的节点坐标数组\n        fillOpacity: 0.15,\n        //透明度\n        fillColor: '#256edc',\n        //填充颜色\n        strokeColor: '#256edc' //线条颜色\n\n      });\n      polygon.on('click', e => {// 点击绘制的区域时执行其他交互\n      });\n    } // 地图自适应\n\n\n    this.map.setFitView(); //  }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/r_gaor/Downloads/amap/src/App.js"],"names":["React","Component","Map","App","constructor","props","componentDidMount","disCountry","window","AMap","DistrictLayer","Country","zIndex","SOC","depth","styles","map","center","resizeEnable","zoom","layers","plugin","districtSearch","DistrictSearch","level","subdistrict","extensions","search","status","result","handlePolygon","bounds","districtList","boundaries","newBounds","v","k","a","console","log","filter","element","index","array","push","polygon","Polygon","strokeWeight","path","fillOpacity","fillColor","strokeColor","on","e","setFitView","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React,{ Component } from 'react'\nimport { Map } from 'react-amap';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let disCountry = new window.AMap.DistrictLayer.Country({\n        zIndex:10,\n        SOC:'CHN',\n        depth:2,\n        styles:{\n            'nation-stroke':'transparent',\n            'coastline-stroke':[0.85, 0.63, 0.94, 0],\n            'province-stroke':'red',\n            'city-stroke': 'rgba(255,255,255,0.15)',//中国特有字段\n            // 'fill':function(props){//中国特有字段\n            //   return getColorByDGP(props.adcode_pro)\n            // }\n        }\n    })\n    //eslint-disable-next-line \n    this.map = new window.AMap.Map('map', {\n        center: [104.29885, 31.957237],\n        resizeEnable: true,\n        zoom: 4,\n        layers: [\n          disCountry\n        ]\n    })\n\n    //eslint-disable-next-line \n    window.AMap.plugin('AMap.DistrictSearch', () => {\n        //eslint-disable-next-line \n        let districtSearch = new window.AMap.DistrictSearch({\n        // 关键字对应的行政区级别，共有5种级别\n        level: 'country',\n        //  是否显示下级行政区级数，1表示返回下一级行政区\n        subdistrict: 0,\n       // 返回行政区边界坐标点\n        extensions: 'all',\n      })\n\n        // 搜索所有省/直辖市信息\n        districtSearch.search(100000, (status, result) => {\n          // 查询成功时，result即为对应的行政区信息\n          this.handlePolygon(result);\n        })\n\n      //   districtSearch.search('中国',(status,result) => {\n      //     // 外多边形坐标数组和内多边形坐标数组\n      //     var outer = [\n      //         new window.AMap.LngLat(-360,90,true),\n      //         new window.AMap.LngLat(-360,-90,true),\n      //         new window.AMap.LngLat(360,-90,true),\n      //         new window.AMap.LngLat(360,90,true),\n      //     ];\n      //     var holes = result.districtList[0].boundaries\n  \n      //     var pathArray = [\n      //         outer\n      //     ];\n      //     pathArray.push.apply(pathArray,holes)\n      //     var polygon = new window.AMap.Polygon( {\n      //         pathL:pathArray,\n      //         strokeColor: '#00eeff',\n      //         strokeWeight: 1,\n      //         fillColor: '#71B3ff',\n      //         fillOpacity: 1\n      //     });\n      //     polygon.setPath(pathArray);\n      //     this.map.add(polygon);\n      //     this.map.setFitView();\n      // })\n    })\n  }\n\n  handlePolygon(result) {\n    let bounds = result.districtList[1].boundaries\n    let newBounds = [];\n    bounds.map((v, k) => {\n      let a;\n      if (k == 0) {\n        console.log(v);\n      }\n      \n      a = v.filter((element, index, array) => {\n        return index % 2 == 0;\n      })\n\n      if (k == 0) {\n        console.log(a);\n      }\n\n      newBounds.push(a);\n\n    })\n    \n    // newBounds = bounds;\n    if (newBounds) {\n      // for (let i = 0, l = newBounds.length; i < l; i++) {\n        //生成行政区划polygon\n        //eslint-disable-next-line \n        let polygon = new window.AMap.Polygon({\n          map: this.map,    // 指定地图对象\n          strokeWeight: 2,    // 轮廓线宽度\n          path: newBounds,     //轮廓线的节点坐标数组\n          fillOpacity: 0.15,     //透明度\n          fillColor: '#256edc',     //填充颜色\n          strokeColor: '#256edc',    //线条颜色\n        })\n\n        polygon.on('click', (e) => {\n        // 点击绘制的区域时执行其他交互\n            \n        })\n      }\n      // 地图自适应\n      this.map.setFitView()\n    //  }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div id=\"map\"></div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}